import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import AudioPlayer from '../../components/audioPlayer'; // Importa el componente que creamos anteriormente

// Funci√≥n para convertir las emociones en emojis
const emotionToEmoji = (emotion) => {
    switch (emotion.toLowerCase()) {
        case 'alegr√≠a':
            return 'üòä';
        case 'tristeza':
            return 'üò¢';
        case 'amor':
            return '‚ù§Ô∏è';
        case 'nostalgia':
            return 'üòå';
        case 'gratitud':
            return 'üôè';
        case 'enfado':
            return 'üò°';
        case 'sorpresa':
            return 'üò≤';
        case 'miedo':
            return 'üò®';
        case 'orgullo':
            return 'üòè';
        case 'verg√ºenza':
            return 'üò≥';
        case 'ansiedad':
            return 'üò∞';
        case 'esperanza':
            return 'üåà';
        case 'confusi√≥n':
            return 'üòï';
        case 'inspiraci√≥n':
            return 'üí°';
        case 'determinaci√≥n':
            return 'üí™';
        case 'calma':
            return 'üòå';
        case 'euforia':
            return 'ü§©';
        case 'melancol√≠a':
            return 'üòî';
        case 'arrepentimiento':
            return 'üòû';
        case 'frustraci√≥n':
            return 'üò§';
        case 'diversi√≥n':
            return 'üòÑ';
        case 'satisfacci√≥n':
            return 'üòå';
        case 'culpa':
            return 'üòì';
        case 'alivio':
            return 'üòÖ';
        case 'curiosidad':
            return 'ü§î';
        case 'solidaridad':
            return 'ü§ù';
        case 'fascinaci√≥n':
            return 'üòç';
        case 'empat√≠a':
            return 'ü§ó';
        case 'cansancio':
            return 'üò©';
        case 'paz':
            return 'üïäÔ∏è';
        case 'resignaci√≥n':
            return 'üòû';
        case 'admiraci√≥n':
            return 'üëè';
        case 'ansia':
            return 'ü•∫';
        case 'compasi√≥n':
            return 'üíû';
        case 'motivaci√≥n':
            return 'üî•';
        case 'soledad':
            return 'üòî';
        case 'ternura':
            return 'ü•∞';
        default:
            return 'üôÇ'; // Emoji por defecto si no se reconoce la emoci√≥n
    }
};

const TextCard = ({ entry }) => {
    if (!entry) {
        return null;
    }

    const formattedFechaCreacion = entry.fechaCreacion
        ? entry.fechaCreacion.toDate().toLocaleDateString('es-ES')
        : '';

    const { texto, audio, color, fechaCreacion, emociones } = entry;

    return (
        <View style={styles.noteWrapper}>
            <View style={[styles.card, { borderLeftColor: color || '#f28b82' }]}>
                {/* Emociones flotantes sobre la tarjeta de texto */}
                {emociones && emociones.length > 0 && (
                    <View style={styles.emojiFlag}>
                        {emociones.map((emotion, index) => (
                            <Text key={index} style={styles.emoji}>
                                {emotionToEmoji(emotion)}
                            </Text>
                        ))}
                    </View>
                )}

                {/* Mostrar texto si est√° disponible */}
                {texto && (
                    <Text style={styles.text}>{texto}</Text>
                )}
                {/* Mostrar reproductor de audio si est√° disponible */}
                {audio && (
                    <AudioPlayer audioUri={audio} />
                )}
                {/* Mostrar la fecha de creaci√≥n */}
                {fechaCreacion && (
                    <Text style={styles.date}>{formattedFechaCreacion}</Text>
                )}
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    noteWrapper: {
        alignItems: 'center',
        marginVertical: 10,
    },
    card: {
        backgroundColor: '#F4E4E4', // Fondo fijo
        borderWidth: 4, // Borde de la tarjeta
        borderRadius: 10, // Borde redondeado
        padding: 15,
        margin: 10,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 3 },
        shadowOpacity: 0.5,
        shadowRadius: 5,
        elevation: 5,
        width: 300, // Ancho fijo para un dise√±o uniforme
        height: 'auto', // Altura seg√∫n el contenido
        position: 'relative',
        borderLeftWidth: 10, // Borde ancho en la izquierda
        borderLeftColor: '#f28b82', // Color predeterminado para la l√≠nea del cuaderno
    },
    text: {
        fontSize: 16,
        marginBottom: 10,
        lineHeight: 24,
        fontStyle: 'italic', // Puedes usar esto para un estilo m√°s personal
        color: '#333',
        fontFamily: 'serif', // Estilo m√°s cl√°sico
    },
    date: {
        fontSize: 12,
        color: '#666',
        position: 'absolute',
        bottom: 10,
        right: 15,
    },
    /* Estilo para el contenedor de emojis estilo bandera */
    emojiFlag: {
        position: 'absolute',
        top: -15,  // Subimos los emojis por encima de la tarjeta
        right: -15,  // Posicionamos los emojis fuera de la esquina derecha
        backgroundColor: '#4B4E6D', // Fondo alineado con los colores de la app
        borderRadius: 20,
        padding: 5,
        flexDirection: 'row',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.3,
        shadowRadius: 2,
        elevation: 6, // Aseguramos que el emoji est√© por encima de todo
        zIndex: 10, // Aseguramos que est√© por encima de otros elementos
    },
    emoji: {
        fontSize: 20,
        marginHorizontal: 3,
    },
});

export default TextCard;
